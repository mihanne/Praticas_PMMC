# -*- coding: utf-8 -*-
"""Cellular_Automata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_YmoVI0JxqjXLAjF_AYhUKCSwtom6rJu
"""

from PIL import Image
import random

def to_binary(value):
    binary = ""
    while value > 0:
        binary = str(value % 2) + binary
        value = value // 2
    return binary.zfill(8)


def cellular_automaton(rule, width, height, random_initial_state=False):
    # Inicialização da matriz do autômato celular
    automaton = [[0] * width]

    # Definindo o estado inicial
    if random_initial_state:
        automaton[0] = [random.choice([0, 1]) for _ in range(width)]
    else:
        automaton[0][width // 2] = 1  # Definindo a célula central como 1

    # Definição das regras
    ruleset = to_binary(rule)

    # Geração das próximas linhas do autômato celular
    for i in range(1, height):
        row = []
        for j in range(width):
            # Obtendo os valores das células vizinhas
            left = automaton[i - 1][(j - 1) % width]
            center = automaton[i - 1][j]
            right = automaton[i - 1][(j + 1) % width]

            # Convertendo os valores das células vizinhas em uma sequência binária
            pattern = ''.join([str(left), str(center), str(right)])

            # Aplicando as regras
            index = 7 - int(pattern, 2)  # Revertendo o padrão binário para corresponder à ordem das regras
            next_cell = int(ruleset[index])

            row.append(next_cell)

        automaton.append(row)

    # Imprimindo o autômato celular como uma figura
    for row in automaton:
        line = ''.join(['#' if cell == 1 else ' ' for cell in row])
        print(line)

    # Criando a imagem
    image = Image.new("1", (width, height))

    # Preenchendo a imagem com os valores do autômato celular
    for y, row in enumerate(automaton):
        for x, cell in enumerate(row):
            pixel = 255 if cell == 1 else 0
            image.putpixel((x, y), pixel)

    # Salvando a imagem como um arquivo PNG
    image.save("automaton.png")

    print("Imagem salva com sucesso!")


# Parâmetros iniciais
L = 80
H = 100
rule = int(input("Digite o número da regra (0-255): "))
initial_state_choice = input("Escolha o estado inicial (o - ocupado, r - aleatório): ")

# Convertendo a escolha do estado inicial para um valor booleano
random_initial_state = False
if initial_state_choice.lower() == "r":
    random_initial_state = True

# Executando o autômato celular
cellular_automaton(rule, L, H, random_initial_state)



